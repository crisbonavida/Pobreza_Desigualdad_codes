blogdown:::serve_site()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
library(margins)
bookdown::render_book()
bookdown::publish_book(render = 'local')
installed.packages("rsconnect")
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book()
file.create('.nojekyll')
knitr::opts_chunk$set(echo = TRUE)
mex07 <- read.csv(data_dir %+% "mex07.csv")
rm(list=ls())    #empiezo limpiando todo
"%+%" <- function(x,y) paste(x,y,sep = "")         # defino un shorcut parar concat de texto
data_dir <- "C:/Users/HP/Desktop/CEDLAS - UNLP/Apendices en R/Material libro/encuestas-cedlas/Encuestas/"
#cargo base
mex06 <- read.dta(data_dir %+% "Mex/2006/bases/mex06_cedlas.dta")
library(dplyr)
library(tidyverse) # Data wrangling
library(lubridate) # Date wrangling
library(tidygraph)
library(readxl)
library(ggplot2)
library(Hmisc)
library(foreign)
rm(list=ls())    #empiezo limpiando todo
"%+%" <- function(x,y) paste(x,y,sep = "")         # defino un shorcut parar concat de texto
data_dir <- "C:/Users/HP/Desktop/CEDLAS - UNLP/Apendices en R/Material libro/encuestas-cedlas/Encuestas/"
#cargo base
mex06 <- read.dta(data_dir %+% "Mex/2006/bases/mex06_cedlas.dta")
#elimino observaciones incoherentes o con ingreso missing
mex06 <- mex06 %>% filter(cohh==1, !is.na(ipcf))
#Cap2-hist
#Figure 2.2
#histograma ipcf
ggplot(mex07,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporci?n", x="ingreso per c?pita familiar")
## Figure 2.2 - histograma ipcf
ggplot(data=mex06,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporci?n", x="ingreso per c?pita familiar")
## Figure 2.2 - histograma ipcf
ggplot(data=mex06,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100),
## Figure 2.2 - histograma ipcf
ggplot(data=mex06,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100)+
color="black", fill="grey") +
## Figure 2.2 - histograma ipcf
ggplot(data=mex06,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100,
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = 1000, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
theme(title: n %+% "intervalos")
}
for (n in n_bins){
print(n)
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = 1000, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
theme(title: n %+% "intervalos")
}
for (n in n_bins){
print(n)
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = 1000, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
ggtitle( n %+% "intervalos")
}
library(gridExtra)
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = 1000, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
ggtitle( n %+% "intervalos")
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
ggtitle( n %+% "intervalos")
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
i=1
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
ggtitle( n %+% "intervalos")
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
g1
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar") +
ggtitle( n %+% "intervalos")
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar") +
ggtitle( n %+% " intervalos")
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar") +
ggtitle( n %+% " intervalos") +
theme(plot.title = element_text(size = 5, hjust = 0.5))
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar") +
ggtitle( n %+% " intervalos") +
theme(plot.title = element_text(size = 10, hjust = 0.5))
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar") +
ggtitle( n %+% " intervalos") +
theme(plot.title = element_text(size = 15, hjust = 0.5))
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
n_bins = c(10,50,100,1000)
my_graphs = list()
i=1
for (n in n_bins){
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar") +
ggtitle( n %+% " intervalos") +
theme(plot.title = element_text(size = 12, hjust = 0.5))
i=i+1
}
g1 <-  my_graphs[[1]]
g2 <-  my_graphs[[2]]
g3 <-  my_graphs[[3]]
g4 <-  my_graphs[[4]]
grid.arrange(g1, g2, g3, g4, ncol=2, nrow=2)
```{r, include=TRUE, out.width = "60%"}
## Figure 2.2 - histograma ipcf
ggplot(data=mex06,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
## Figure 2.2 - histograma ipcf
ggplot(data=mex06,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
```{r, include=TRUE, out.width = "50%"}
```{r include=TRUE, out.width = "50%"}
## Figure 2.3 - histograma ipcf sin outliers
ggplot(data=mex06,
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
## Figure 2.3 - histograma ipcf sin outliers
ggplot(data=mex06 %>% filter(ipcf < 15000),
aes(x=ipcf, weight=pondera)) +
geom_histogram(bins = 100, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
#Figure 2.5
#histogramas logaritmo ipcf con diferente número de bins
ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = 10, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar")
#ordenar según región + ipcf
mex06 <- mex06 %>% arrange(region, ipcf)
#población acumulada por región
mex06 <- mex06 %>% group_by(region) %>% mutate(shrpop=cumsum(pondera)/sum(pondera))
mex06 <- mex06 %>% mutate(lpareto=log(1-shrpop))
ggplot(mex06 %>% filter(region==1 | region==6),
aes(x=log(ipcf), y=lpareto, weight=pondera, linetype=factor(region))) +
geom_line(size=1.2) +
scale_linetype(name="Region", labels=c("Noroeste", "Sur")) +
labs(x="logaritmo del ingreso per c?pita familiar")
cutoff=0.99
ggplot(mex06 %>% filter((region==1 | region==6) & (shrpop<=cutoff)),
aes(x=log(ipcf), y=lpareto, weight=pondera, linetype=factor(region))) +
geom_line(size=1.2) +
scale_linetype(name="Region", labels=c("Noroeste", "Sur")) +
labs(x="logaritmo del ingreso per c?pita familiar")
ggplot(mex06 %>% filter(region==1 | region==6),
aes(x=log(ipcf), y=lpareto, weight=pondera, linetype=factor(region))) +
geom_line(size=1.2) +
scale_linetype(name="Region", labels=c("Noroeste", "Sur")) +
labs(x="logaritmo del ingreso per c?pita familiar")
stats <-boxplot.stats(mex06$ipcf)$stats[c(1,5)]  ##computar el extremo menor y mayor para usarlo como limite con boxplot.stats
ymin=stats[1]
ymax=stats[2]
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +   #ggplot permite eliminar los puntos outliers pero no ajusta el eje
coord_cartesian(ylim=c(ymin, ymax))    #para ajustar el eje impongo el limite en base a los limites obtenidos
stats <-boxplot.stats(log(mex06$ipcf))$stats[c(1,5)]  ##computar el extremo menor y mayor para usarlo como limite con boxplot.stats
ymin=stats[1]
ymax=stats[2]
ggplot(mex06,
aes(y=log(ipcf), weight=pondera))+
geom_boxplot(outlier.shape = NA) +
coord_cartesian(ylim=c(ymin, ymax))
install.packages("quantreg")
#figura 2.15
library(quantreg)
stats <-boxplot.stats(mex06$ipcf)$stats[c(1,5)]  ##computar el extremo menor y mayor para usarlo como limite con boxplot.stats
ymin=stats[1]
ymax=stats[2]
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +   #ggplot permite eliminar los puntos outliers pero no ajusta el eje
coord_cartesian(ylim=c(ymin, ymax))    #para ajustar el eje impongo el limite en base a los limites obtenidos
stats <-boxplot.stats(log(mex06$ipcf))$stats[c(1,5)]  ##computar el extremo menor y mayor para usarlo como limite con boxplot.stats
ymin=stats[1]
ymax=stats[2]
ggplot(mex06,
aes(y=log(ipcf), weight=pondera))+
geom_boxplot(outlier.shape = NA) +
coord_cartesian(ylim=c(ymin, ymax))
#otra opción mas directa fuera de ggplot
boxplot(mex06$ipcf, outline = FALSE)
boxplot(log(mex06$ipcf), outline = FALSE)
#otra opción mas directa fuera de ggplot
boxplot(mex06$ipcf, outline = FALSE)
boxplot(log(mex06$ipcf), outline = FALSE)
#otra opción mas directa fuera de ggplot
boxplot(mex06$ipcf, outline = FALSE)
boxplot(log(mex06$ipcf), outline = FALSE)
ggplot(mex06,
aes(y=log(ipcf), weight=pondera))+
geom_boxplot(outlier.shape = NA) +
coord_cartesian(ylim=c(ymin, ymax))
stats <-boxplot.stats(mex06$ipcf)$stats[c(1,5)]  ##computar el extremo menor y mayor para usarlo como limite con boxplot.stats
ymin=stats[1]
ymax=stats[2]
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +   #ggplot permite eliminar los puntos outliers pero no ajusta el eje
coord_cartesian(ylim=c(ymin, ymax))  #para ajustar el eje impongo el limite en base a los limites obtenidos
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +   #ggplot permite eliminar los puntos outliers pero no ajusta el eje
#coord_cartesian(ylim=c(ymin, ymax))  #para ajustar el eje impongo el limite en base a los limites obtenidos
stats <-boxplot.stats(log(mex06$ipcf))$stats[c(1,5)]  ##computar el extremo menor y mayor para usarlo como limite con boxplot.stats
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) #+   #ggplot permite eliminar los puntos outliers pero no ajusta el eje
-boxplot.stats(mex06$ipcf)$stats[c(1,5)]
boxplot.stats(mex06$ipcf)
stats <-boxplot.stats(mex06$ipcf)$stats[c(1,5)]  ##computar el extremo menor y mayor para usarlo como limite con boxplot.stats
ymin=stats[1]
ymax=stats[2]
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +   #ggplot permite eliminar los puntos outliers pero no ajusta el eje
coord_cartesian(ylim=c(ymin, ymax))  #para ajustar el eje impongo el limite en base a los limites obtenidos
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +   #ggplot permite eliminar los puntos outliers pero no ajusta el eje
coord_cartesian(ylim=quantile(mex06$ipcf, c(0.1, 0.9)))  #para ajustar el eje impongo el limite en base a los limites obtenidos
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +                       #ggplot permite eliminar los puntos outliers pero no ajusta el eje
coord_cartesian(ylim=quantile(mex06$ipcf, c(0.05, 0.95)))  #para ajustar el eje impongo el limite en base a los limites obtenidos
ggplot(mex06,
aes(y=ipcf, weight=pondera)) +
geom_boxplot(outlier.shape = NA) +                       #ggplot permite eliminar los puntos outliers pero no ajusta el eje
coord_cartesian(ylim=quantile(mex06$ipcf, c(0.1, 0.9)))  #para ajustar el eje impongo el limite en base a los limites obtenidos
#otra opción mas directa fuera de ggplot
boxplot(mex06$ipcf, outline = FALSE)
boxplot(log(mex06$ipcf), outline = FALSE)
#otra opción mas directa fuera de ggplot
boxplot(mex06$ipcf)
#otra opción mas directa fuera de ggplot
boxplot(mex06$ipcf, outline = FALSE)
#ordenar según ipcf
mex06 <- mex06 %>% ungroup() %>% arrange(ipcf)
#figura 2.18 - curva de lorenz
ggplot(mex06, aes(x=shrpop, y=shrinc)) +
geom_line()
#ordenar según ipcf
mex06 <- mex06 %>% ungroup() %>% arrange(ipcf)
#figura 2.18 - curva de lorenz
ggplot(mex06, aes(x=shrpop, y=shrinc)) +
geom_line()
#población e ingreso acumulado
mex06 <- mex06 %>% mutate(shrpop=cumsum(pondera)/sum(pondera),
shrinc=cumsum(ipcf*pondera)/sum(ipcf*pondera))
#ordenar según ipcf
mex06 <- mex06 %>% arrange(ipcf) %>% ungroup()
#población e ingreso acumulado
mex06 <- mex06 %>% mutate(shrpop=cumsum(pondera)/sum(pondera),
shrinc=cumsum(ipcf*pondera)/sum(ipcf*pondera))
#figura 2.18
#curva de lorenz
ggplot(mex06, aes(x=shrpop, y=shrinc)) +
geom_line()
#ordenar según ipcf
mex06 <- mex06 %>% arrange(region, ipcf)
#población acumulada por región
mex06 <- mex06 %>% group_by(region) %>%
mutate(shrpop=cumsum(pondera)/sum(pondera),
shrinc=cumsum(ipcf*pondera)/sum(ipcf*pondera))
ggplot(mex06 %>% filter(region==1 | region==6),
aes(x=shrpop, y=shrinc, linetype=factor(region))) +
geom_line() +
scale_linetype(name="Region", labels=c("Noroeste", "Sur")) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
my_graphs[[i]] <- ggplot(mex06,
aes(x=log(ipcf), weight=pondera)) +
geom_histogram(bins = n, aes(y = stat(count) / sum(count)),
color="black", fill="grey") +
labs(y="proporción", x="ingreso per cápita familiar") +
ggtitle( n %+% " intervalos") +
theme(plot.title = element_text(size = 12, hjust = 0.5))
